{"ast":null,"code":"export const setBet = amount => ({\n  type: 'SET_BET',\n  payload: amount\n});\nconst getCardValue = card => {\n  if (['JACK', 'QUEEN', 'KING'].includes(card.rank)) {\n    return 10;\n  } else if (card.rank === 'ACE') {\n    return 11;\n  } else {\n    return parseInt(card.rank);\n  }\n};\nexport const dealCards = () => (dispatch, getState) => {\n  const {\n    deck\n  } = getState().game;\n  const dealerCard1 = deck.pop();\n  const dealerCard2 = deck.pop();\n  const playerCard1 = deck.pop();\n  const playerCard2 = deck.pop();\n  const dealerScore = getCardValue(dealerCard1) + getCardValue(dealerCard2);\n  const playerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      dealerCard: dealerCard1,\n      hiddenCard: dealerCard2,\n      playerCard1,\n      playerCard2,\n      dealerScore,\n      playerScore\n    }\n  });\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    deck,\n    playerHand,\n    currentPlayerScore\n  } = getState().game;\n  const card = deck.pop();\n  const score = getCardValue(card) + currentPlayerScore;\n  const newHand = [...playerHand, card];\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card,\n      score,\n      hand: newHand\n    }\n  });\n};\nexport const stand = () => (dispatch, getState) => {\n  const {\n    deck,\n    dealerHand,\n    currentDealerScore\n  } = getState().game;\n  let score = currentDealerScore;\n  let hand = [...dealerHand];\n  while (score < 17) {\n    const card = deck.pop();\n    hand.push(card);\n    score += getCardValue(card);\n  }\n  dispatch({\n    type: 'STAND',\n    payload: {\n      score,\n      hand\n    }\n  });\n};\nexport const resetGame = () => ({\n  type: 'RESET_GAME'\n});","map":{"version":3,"names":["setBet","amount","type","payload","getCardValue","card","includes","rank","parseInt","dealCards","dispatch","getState","deck","game","dealerCard1","pop","dealerCard2","playerCard1","playerCard2","dealerScore","playerScore","dealerCard","hiddenCard","hit","playerHand","currentPlayerScore","score","newHand","hand","stand","dealerHand","currentDealerScore","push","resetGame"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["export const setBet = (amount) => ({\n  type: 'SET_BET',\n  payload: amount\n});\n\nconst getCardValue = (card) => {\n  if (['JACK', 'QUEEN', 'KING'].includes(card.rank)) {\n    return 10;\n  } else if (card.rank === 'ACE') {\n    return 11;\n  } else {\n    return parseInt(card.rank);\n  }\n};\n\nexport const dealCards = () => (dispatch, getState) => {\n  const { deck } = getState().game;\n  const dealerCard1 = deck.pop();\n  const dealerCard2 = deck.pop();\n  const playerCard1 = deck.pop();\n  const playerCard2 = deck.pop();\n  const dealerScore = getCardValue(dealerCard1) + getCardValue(dealerCard2);\n  const playerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      dealerCard: dealerCard1,\n      hiddenCard: dealerCard2,\n      playerCard1,\n      playerCard2,\n      dealerScore,\n      playerScore\n    }\n  });\n};\n\nexport const hit = () => (dispatch, getState) => {\n  const { deck, playerHand, currentPlayerScore } = getState().game;\n  const card = deck.pop();\n  const score = getCardValue(card) + currentPlayerScore;\n  const newHand = [...playerHand, card];\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card,\n      score,\n      hand: newHand\n    }\n  });\n};\n\nexport const stand = () => (dispatch, getState) => {\n  const { deck, dealerHand, currentDealerScore } = getState().game;\n  let score = currentDealerScore;\n  let hand = [...dealerHand];\n  while (score < 17) {\n    const card = deck.pop();\n    hand.push(card);\n    score += getCardValue(card);\n  }\n  dispatch({\n    type: 'STAND',\n    payload: {\n      score,\n      hand\n    }\n  });\n};\n\nexport const resetGame = () => ({\n  type: 'RESET_GAME'\n});\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAIC,MAAM,KAAM;EACjCC,IAAI,EAAE,SAAS;EACfC,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,MAAMG,YAAY,GAAIC,IAAI,IAAK;EAC7B,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,EAAE;IACjD,OAAO,EAAE;EACX,CAAC,MAAM,IAAIF,IAAI,CAACE,IAAI,KAAK,KAAK,EAAE;IAC9B,OAAO,EAAE;EACX,CAAC,MAAM;IACL,OAAOC,QAAQ,CAACH,IAAI,CAACE,IAAI,CAAC;EAC5B;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAM,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAM;IAAEC;EAAK,CAAC,GAAGD,QAAQ,EAAE,CAACE,IAAI;EAChC,MAAMC,WAAW,GAAGF,IAAI,CAACG,GAAG,EAAE;EAC9B,MAAMC,WAAW,GAAGJ,IAAI,CAACG,GAAG,EAAE;EAC9B,MAAME,WAAW,GAAGL,IAAI,CAACG,GAAG,EAAE;EAC9B,MAAMG,WAAW,GAAGN,IAAI,CAACG,GAAG,EAAE;EAC9B,MAAMI,WAAW,GAAGf,YAAY,CAACU,WAAW,CAAC,GAAGV,YAAY,CAACY,WAAW,CAAC;EACzE,MAAMI,WAAW,GAAGhB,YAAY,CAACa,WAAW,CAAC,GAAGb,YAAY,CAACc,WAAW,CAAC;EACzER,QAAQ,CAAC;IACPR,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACPkB,UAAU,EAAEP,WAAW;MACvBQ,UAAU,EAAEN,WAAW;MACvBC,WAAW;MACXC,WAAW;MACXC,WAAW;MACXC;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMG,GAAG,GAAG,MAAM,CAACb,QAAQ,EAAEC,QAAQ,KAAK;EAC/C,MAAM;IAAEC,IAAI;IAAEY,UAAU;IAAEC;EAAmB,CAAC,GAAGd,QAAQ,EAAE,CAACE,IAAI;EAChE,MAAMR,IAAI,GAAGO,IAAI,CAACG,GAAG,EAAE;EACvB,MAAMW,KAAK,GAAGtB,YAAY,CAACC,IAAI,CAAC,GAAGoB,kBAAkB;EACrD,MAAME,OAAO,GAAG,CAAC,GAAGH,UAAU,EAAEnB,IAAI,CAAC;EACrCK,QAAQ,CAAC;IACPR,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE;MACPE,IAAI;MACJqB,KAAK;MACLE,IAAI,EAAED;IACR;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAM,CAACnB,QAAQ,EAAEC,QAAQ,KAAK;EACjD,MAAM;IAAEC,IAAI;IAAEkB,UAAU;IAAEC;EAAmB,CAAC,GAAGpB,QAAQ,EAAE,CAACE,IAAI;EAChE,IAAIa,KAAK,GAAGK,kBAAkB;EAC9B,IAAIH,IAAI,GAAG,CAAC,GAAGE,UAAU,CAAC;EAC1B,OAAOJ,KAAK,GAAG,EAAE,EAAE;IACjB,MAAMrB,IAAI,GAAGO,IAAI,CAACG,GAAG,EAAE;IACvBa,IAAI,CAACI,IAAI,CAAC3B,IAAI,CAAC;IACfqB,KAAK,IAAItB,YAAY,CAACC,IAAI,CAAC;EAC7B;EACAK,QAAQ,CAAC;IACPR,IAAI,EAAE,OAAO;IACbC,OAAO,EAAE;MACPuB,KAAK;MACLE;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,SAAS,GAAG,OAAO;EAC9B/B,IAAI,EAAE;AACR,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}