{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\nimport { getOptimalMove } from '../utils/utils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = () => dispatch => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n  const playerCard1 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n\n  // remove the cards from the deck (we have removed 4 cards)\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n  const currentDealerScore = getCardValue(dealerCard1);\n  const currentPlayerScore = getHandValue(playerHand);\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore\n    }\n  });\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  const nextCard = getNextCard(deck);\n  // get the players current cards\n  const playerHand = game.playerHand;\n  // add the next card to the players hand\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n  console.log('newScore', newScore);\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\nexport const guessHit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'H') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\nexport const guessStand = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'S') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\nexport const guessDouble = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'D') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\nexport const guessSplit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'P') {\n    dispatch(correctGuess(dispatch, getState));\n    dispatch(resetGame());\n    dispatch(dealCards());\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\nexport const correctGuess = (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const currentScore = game.score;\n  const newScore = currentScore + 1;\n  return dispatch({\n    type: 'UPDATE_SCORE',\n    payload: newScore\n  });\n};\nexport const incorrectGuess = (dispatch, getState) => {\n  const newScore = 0;\n\n  // update the score and reset the game\n  dispatch({\n    type: 'UPDATE_SCORE',\n    payload: newScore\n  });\n  return dispatch(resetGame());\n};\nexport const getNextCard = deck => {\n  return deck[0];\n};\nexport const stand = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  let deck = game.deck;\n  let dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n\n  // Reveal hidden card and update dealer score\n  const hiddenCard = dealerHand[1];\n  dealerScore += getCardValue(hiddenCard);\n\n  // Dealer must hit until they have 17 or more\n  // without while loop\n  // if (dealerScore < 17) {\n  //   const nextCard = getNextCard(deck);\n  //   dealerHand = [...dealerHand, nextCard];\n  //   dealerScore += getCardValue(nextCard);\n  //   deck = deck.slice(1);\n  // }\n  while (dealerScore < 17) {\n    const nextCard = getNextCard(deck);\n    dealerHand = [...dealerHand, nextCard];\n    dealerScore = getHandValue(dealerHand);\n    deck = deck.slice(1);\n  }\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","getHandValue","getOptimalMove","setBet","bet","type","payload","dealCards","dispatch","deck","shuffledDeck","playerCard1","pop","hiddenCard","playerCard2","dealerCard1","newDeck","slice","playerHand","dealerHand","currentDealerScore","currentPlayerScore","hit","getState","game","nextCard","getNextCard","newPlayerHand","newScore","card","score","console","log","guessHit","dealerUpCard","optimalDecision","correctGuess","incorrectGuess","guessStand","guessDouble","guessSplit","resetGame","currentScore","stand","dealerScore","hand"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\nimport { getOptimalMove } from '../utils/utils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = () => (dispatch) => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n\n  const playerCard1 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n\n  // remove the cards from the deck (we have removed 4 cards)\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n\n  const currentDealerScore = getCardValue(dealerCard1);\n  const currentPlayerScore = getHandValue(playerHand);\n\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore\n    }\n  });\n};\n\nexport const hit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n\n  const nextCard = getNextCard(deck);\n  // get the players current cards\n  const playerHand = game.playerHand;\n  // add the next card to the players hand\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n\n  console.log('newScore', newScore);\n\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\n\nexport const guessHit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'H') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\n\nexport const guessStand = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'S') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\n\nexport const guessDouble = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  \n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'D') {\n    dispatch(correctGuess(dispatch, getState));\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\n\nexport const guessSplit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  \n  if (optimalDecision === 'P') {\n    dispatch(correctGuess(dispatch, getState));\n    dispatch(resetGame());\n    dispatch(dealCards());\n  } else {\n    dispatch(incorrectGuess(dispatch, getState));\n  }\n};\n\nexport const correctGuess = (dispatch, getState) => {\n  const { game } = getState();\n  const currentScore = game.score;\n  const newScore = currentScore + 1;\n\n   return dispatch({\n    type: 'UPDATE_SCORE',\n    payload: newScore\n  });\n\n};\n\nexport const incorrectGuess = (dispatch, getState) => {\n  const newScore = 0;\n\n  // update the score and reset the game\n  dispatch({\n    type: 'UPDATE_SCORE',\n    payload: newScore\n  });\n  return dispatch(resetGame());\n};\n\nexport const getNextCard = (deck) => {\n  return deck[0];\n}\n\nexport const stand = () => (dispatch, getState) => {\n  const { game } = getState();\n  let deck = game.deck;\n  let dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n\n  // Reveal hidden card and update dealer score\n  const hiddenCard = dealerHand[1];\n  dealerScore += getCardValue(hiddenCard);\n\n  // Dealer must hit until they have 17 or more\n  // without while loop\n  // if (dealerScore < 17) {\n  //   const nextCard = getNextCard(deck);\n  //   dealerHand = [...dealerHand, nextCard];\n  //   dealerScore += getCardValue(nextCard);\n  //   deck = deck.slice(1);\n  // }\n  while (dealerScore < 17) {\n    const nextCard = getNextCard(deck);\n    dealerHand = [...dealerHand, nextCard];\n    dealerScore = getHandValue(dealerHand);\n    deck = deck.slice(1);\n  }\n\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}