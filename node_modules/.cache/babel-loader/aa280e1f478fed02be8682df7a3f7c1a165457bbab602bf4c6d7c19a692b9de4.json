{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = bet => {\n  return (dispatch, getState) => {\n    const deck = getDeck();\n    shuffleDeck(deck);\n    // console.log(deck)\n\n    const dealerCard1 = deck.pop();\n    const hiddenCard = deck.pop();\n    const dealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n    const playerCard1 = deck.pop();\n    const playerCard2 = deck.pop();\n    const playerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n    console.log(dealerCard1, hiddenCard, playerCard1, playerCard2, dealerScore, playerScore);\n    dispatch({\n      type: 'DEAL_CARDS',\n      payload: {\n        dealerCard: dealerCard1,\n        hiddenCard: hiddenCard,\n        playerCard1: playerCard1,\n        playerCard2: playerCard2,\n        dealerScore: dealerScore,\n        playerScore: playerScore\n      }\n    });\n  };\n};\nexport const hit = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const playerHand = getState().game.playerHand;\n    const currentPlayerScore = getState().game.currentPlayerScore;\n    const newCard = deck.pop();\n    const newScore = currentPlayerScore + getCardValue(newCard);\n    dispatch({\n      type: 'HIT',\n      payload: {\n        card: newCard,\n        score: newScore\n      }\n    });\n  };\n};\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","setBet","bet","type","payload","dealCards","dispatch","getState","deck","dealerCard1","pop","hiddenCard","dealerScore","playerCard1","playerCard2","playerScore","console","log","dealerCard","hit","game","playerHand","currentPlayerScore","newCard","newScore","card","score","stand","dealerHand","currentDealerScore","push","hand","resetGame"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = (bet) => {\n  return (dispatch, getState) => {\n    const deck = getDeck();\n    shuffleDeck(deck);\n    // console.log(deck)\n\n    const dealerCard1 = deck.pop();\n    const hiddenCard = deck.pop();\n    const dealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n    const playerCard1 = deck.pop();\n    const playerCard2 = deck.pop();\n    const playerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n    console.log(dealerCard1, hiddenCard, playerCard1, playerCard2, dealerScore, playerScore);\n    dispatch({\n      type: 'DEAL_CARDS',\n      payload: {\n        dealerCard: dealerCard1,\n        hiddenCard: hiddenCard,\n        playerCard1: playerCard1,\n        playerCard2: playerCard2,\n        dealerScore: dealerScore,\n        playerScore: playerScore\n      }\n    });\n  };\n};\n\nexport const hit = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const playerHand = getState().game.playerHand;\n    const currentPlayerScore = getState().game.currentPlayerScore;\n    const newCard = deck.pop();\n    const newScore = currentPlayerScore + getCardValue(newCard);\n\n    dispatch({\n      type: 'HIT',\n      payload: {\n        card: newCard,\n        score: newScore\n      }\n    });\n  };\n};\n\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}