{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\nimport { getOptimalMove } from '../utils/utils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = () => dispatch => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n  const playerCard1 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n  const playerHasPair = playerCard1.value === playerCard2.value;\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n  const currentDealerScore = getCardValue(dealerCard1);\n  const currentPlayerScore = getHandValue(playerHand);\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore,\n      playerHasPair\n    }\n  });\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  const nextCard = getNextCard(deck);\n  const playerHand = game.playerHand;\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\nexport const guessHit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'H') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\nexport const guessStand = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'S') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\nexport const guessDouble = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'D') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\nexport const guessSplit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === 'P') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\nexport const guess = guess => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  if (optimalDecision === guess) {\n    dispatch(correctGuess());\n  } else {\n    dispatch(incorrectGuess());\n  }\n};\nexport const correctGuess = () => dispatch => {\n  dispatch(resetGame());\n  dispatch(dealCards());\n  return dispatch({\n    type: 'UPDATE_SCORE_CORRECT'\n  });\n};\nexport const incorrectGuess = () => dispatch => {\n  return dispatch({\n    type: 'UPDATE_SCORE_INCORRECT'\n  });\n};\nexport const getNextCard = deck => {\n  return deck[0];\n};\nexport const stand = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  let deck = game.deck;\n  let dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n  const hiddenCard = dealerHand[1];\n  dealerScore += getCardValue(hiddenCard);\n  while (dealerScore < 17) {\n    const nextCard = getNextCard(deck);\n    dealerHand = [...dealerHand, nextCard];\n    dealerScore = getHandValue(dealerHand);\n    deck = deck.slice(1);\n  }\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","getHandValue","getOptimalMove","setBet","bet","type","payload","dealCards","dispatch","deck","shuffledDeck","playerCard1","pop","hiddenCard","playerCard2","dealerCard1","playerHasPair","value","newDeck","slice","playerHand","dealerHand","currentDealerScore","currentPlayerScore","hit","getState","game","nextCard","getNextCard","newPlayerHand","newScore","card","score","guessHit","dealerUpCard","optimalDecision","correctGuess","incorrectGuess","guessStand","guessDouble","guessSplit","guess","resetGame","stand","dealerScore","hand"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\nimport { getOptimalMove } from '../utils/utils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = () => (dispatch) => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n\n  const playerCard1 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n\n  const playerHasPair = playerCard1.value === playerCard2.value;\n\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n\n  const currentDealerScore = getCardValue(dealerCard1);\n  const currentPlayerScore = getHandValue(playerHand);\n\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore,\n      playerHasPair\n    }\n  });\n};\n\nexport const hit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n\n  const nextCard = getNextCard(deck);\n  const playerHand = game.playerHand;\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\n\nexport const guessHit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'H') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\n\nexport const guessStand = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'S') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\n\nexport const guessDouble = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n  \n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === 'D') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\n\nexport const guessSplit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n  \n  if (optimalDecision === 'P') {\n    dispatch(correctGuess(dispatch));\n  } else {\n    dispatch(incorrectGuess(dispatch));\n  }\n};\n\nexport const guess = (guess) => (dispatch, getState) => {\n  const { game } = getState();\n  const playerHand = game.playerHand;\n  const dealerHand = game.dealerHand;\n  const dealerUpCard = dealerHand[0];\n\n  const optimalDecision = getOptimalMove(dealerUpCard, playerHand);\n\n  if (optimalDecision === guess) {\n    dispatch(correctGuess());\n  } else {\n    dispatch(incorrectGuess());\n  }\n};\n\nexport const correctGuess = () => (dispatch) => {\n  dispatch(resetGame());\n  dispatch(dealCards());\n\n  return dispatch({\n    type: 'UPDATE_SCORE_CORRECT',\n  });\n};\n\nexport const incorrectGuess = () => (dispatch) => {\n  return dispatch({\n    type: 'UPDATE_SCORE_INCORRECT',\n  });\n};\n\n\n\nexport const getNextCard = (deck) => {\n  return deck[0];\n}\n\nexport const stand = () => (dispatch, getState) => {\n  const { game } = getState();\n  let deck = game.deck;\n  let dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n\n  const hiddenCard = dealerHand[1];\n  dealerScore += getCardValue(hiddenCard);\n\n  while (dealerScore < 17) {\n    const nextCard = getNextCard(deck);\n    dealerHand = [...dealerHand, nextCard];\n    dealerScore = getHandValue(dealerHand);\n    deck = deck.slice(1);\n  }\n\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}