{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n  const playerCard1 = deck.pop();\n  const dealerCard1 = deck.pop();\n  const playerCard2 = deck.pop();\n  const hiddenCard = deck.pop();\n  const currentDealerScore = getHandValue([dealerCard1, hiddenCard]);\n  const currentPlayerScore = getHandValue([playerCard1, playerCard2]);\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      dealerCard1,\n      hiddenCard,\n      playerCard1,\n      playerCard2,\n      dealerScore: currentDealerScore,\n      playerScore: currentPlayerScore,\n      deck: shuffledDeck\n    }\n  });\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  console.log(deck);\n  const nextCard = getNextCard(deck);\n  const currentScore = getHandValue([...game.playerHand, nextCard]);\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: currentScore\n    }\n  });\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\nexport const getNextCard = deck => {\n  return deck[0];\n};\nexport const getHandValue = hand => {\n  let value = 0;\n  let hasAce = false;\n  for (let i = 0; i < hand.length; i++) {\n    console.log(hand);\n    const cardValue = getCardValue(hand[i].value);\n    if (cardValue === 11) {\n      hasAce = true;\n    }\n    value += cardValue;\n  }\n  if (value > 21 && hasAce) {\n    value -= 10;\n  }\n  return value;\n};\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","setBet","bet","type","payload","dealCards","dispatch","getState","game","deck","shuffledDeck","playerCard1","pop","dealerCard1","playerCard2","hiddenCard","currentDealerScore","getHandValue","currentPlayerScore","dealerScore","playerScore","hit","console","log","nextCard","getNextCard","currentScore","playerHand","card","score","newDeck","slice","hand","value","hasAce","i","length","cardValue","stand","dealerHand","newCard","push","resetGame"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n\n    const playerCard1 = deck.pop();\n    const dealerCard1 = deck.pop();\n    const playerCard2 = deck.pop();\n    const hiddenCard = deck.pop();\n    const currentDealerScore = getHandValue([dealerCard1, hiddenCard]);\n  const currentPlayerScore = getHandValue([playerCard1, playerCard2]);\n\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      dealerCard1,\n      hiddenCard,\n      playerCard1,\n      playerCard2,\n      dealerScore: currentDealerScore,\n      playerScore: currentPlayerScore,\n      deck: shuffledDeck\n    }\n  });\n};\n\nexport const hit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n  console.log(deck);\n\n  const nextCard = getNextCard(deck);\n  const currentScore = getHandValue([...game.playerHand, nextCard]);\n\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: currentScore\n    }\n  });\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\n\nexport const getNextCard = (deck) => {\n  return deck[0];\n}\n\nexport const getHandValue = (hand) => {\n  let value = 0;\n  let hasAce = false;\n\n  for (let i = 0; i < hand.length; i++) {\n    console.log(hand);\n    const cardValue = getCardValue(hand[i].value);\n    if (cardValue === 11) {\n      hasAce = true;\n    }\n    value += cardValue;\n  }\n\n  if (value > 21 && hasAce) {\n    value -= 10;\n  }\n\n  return value;\n}\n\n\n\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}