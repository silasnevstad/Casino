{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = () => dispatch => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n  const playerCard1 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();\n  const currentDealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n  const currentPlayerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n\n  // remove the cards from the deck (we have removed 4 cards)\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore\n    }\n  });\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  const nextCard = getNextCard(deck);\n  // get the players current cards\n  const playerHand = game.playerHand;\n  // add the next card to the players hand\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n  console.log('newScore', newScore);\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\nexport const getNextCard = deck => {\n  return deck[0];\n};\nexport const stand = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  const dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n\n  // Reveal hidden card and update dealer score\n  // const hiddenCard = dealerHand[1];\n  // dealerHand[1] = hiddenCard;\n  // dealerScore += getCardValue(hiddenCard);\n\n  // Dealer must hit until they have 17 or more\n  while (dealerScore < 17) {\n    const newCard = deck.pop();\n    dealerHand.push(newCard);\n    dealerScore += getCardValue(newCard);\n  }\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","getHandValue","setBet","bet","type","payload","dealCards","dispatch","deck","shuffledDeck","playerCard1","pop","dealerCard1","playerCard2","hiddenCard","currentDealerScore","currentPlayerScore","newDeck","slice","playerHand","dealerHand","hit","getState","game","nextCard","getNextCard","newPlayerHand","newScore","card","score","console","log","stand","dealerScore","newCard","push","hand","resetGame"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue, getHandValue } from '../utils/deckUtils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = () => (dispatch) => {\n  const deck = getDeck();\n  const shuffledDeck = shuffleDeck(deck);\n\n  const playerCard1 = shuffledDeck.pop();\n  const dealerCard1 = shuffledDeck.pop();\n  const playerCard2 = shuffledDeck.pop();\n  const hiddenCard = shuffledDeck.pop();  \n\n  const currentDealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n  const currentPlayerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n\n  // remove the cards from the deck (we have removed 4 cards)\n  const newDeck = shuffledDeck.slice(4);\n  const playerHand = [playerCard1, playerCard2];\n  const dealerHand = [dealerCard1, hiddenCard];\n\n  dispatch({\n    type: 'DEAL_CARDS',\n    payload: {\n      newDeck,\n      dealerHand,\n      playerHand,\n      currentDealerScore,\n      currentPlayerScore\n    }\n  });\n};\n\n\n\nexport const hit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n\n  const nextCard = getNextCard(deck);\n  // get the players current cards\n  const playerHand = game.playerHand;\n  // add the next card to the players hand\n  const newPlayerHand = [...playerHand, nextCard];\n  const newScore = getHandValue(newPlayerHand);\n\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: newScore\n    }\n  });\n\n  console.log('newScore', newScore);\n\n  if (newScore > 21) {\n    dispatch({\n      type: 'BUST'\n    });\n  }\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\n\nexport const getNextCard = (deck) => {\n  return deck[0];\n}\n\n\n\nexport const stand = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n  const dealerHand = game.dealerHand;\n  let dealerScore = game.currentDealerScore;\n\n  // Reveal hidden card and update dealer score\n  // const hiddenCard = dealerHand[1];\n  // dealerHand[1] = hiddenCard;\n  // dealerScore += getCardValue(hiddenCard);\n\n  // Dealer must hit until they have 17 or more\n  while (dealerScore < 17) {\n    const newCard = deck.pop();\n    dealerHand.push(newCard);\n    dealerScore += getCardValue(newCard);\n  }\n\n  dispatch({\n    type: 'STAND',\n    payload: {\n      hand: dealerHand,\n      score: dealerScore\n    }\n  });\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}