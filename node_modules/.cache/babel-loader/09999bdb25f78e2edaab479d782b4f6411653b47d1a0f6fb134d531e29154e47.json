{"ast":null,"code":"import { getDeck } from '../utils/deckUtils';\nconst initialState = {\n  score: 0,\n  dealerHand: [],\n  playerHand: [],\n  currentDealerScore: 0,\n  currentPlayerScore: 0,\n  gameStage: 'ready',\n  hasPair: false,\n  deck: []\n};\nconst gameReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'SET_BET':\n      return {\n        ...state,\n        bet: action.payload\n      };\n    case 'DEAL_CARDS':\n      return {\n        ...state,\n        dealerHand: action.payload.dealerHand,\n        playerHand: action.payload.playerHand,\n        currentDealerScore: action.payload.currentDealerScore,\n        currentPlayerScore: action.payload.currentPlayerScore,\n        gameStage: 'inProgress',\n        deck: action.payload.newDeck,\n        hasPair: action.payload.playerHasPair\n      };\n    case 'HIT':\n      return {\n        ...state,\n        playerHand: [...state.playerHand, action.payload.card],\n        currentPlayerScore: action.payload.score\n      };\n    case 'BUST':\n      return {\n        ...state,\n        gameStage: 'result'\n      };\n    case 'UPDATE_DECK':\n      return {\n        ...state,\n        deck: action.payload\n      };\n    case 'UPDATE_SCORE_CORRECT':\n      // log the score\n      console.log('score', state.score);\n      console.log('bet', state.bet);\n      return {\n        ...state,\n        score: state.score + 1\n      };\n    case 'UPDATE_SCORE_INCORRECT':\n      return {\n        ...state,\n        score: 0\n      };\n    case 'STAND':\n      return {\n        ...state,\n        dealerHand: action.payload.hand,\n        currentDealerScore: action.payload.score,\n        gameStage: 'result'\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        deck: getDeck()\n      };\n    default:\n      return state;\n  }\n};\nexport default gameReducer;","map":{"version":3,"names":["getDeck","initialState","score","dealerHand","playerHand","currentDealerScore","currentPlayerScore","gameStage","hasPair","deck","gameReducer","state","action","type","bet","payload","newDeck","playerHasPair","card","console","log","hand"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/reducers/gameReducer.js"],"sourcesContent":["import { getDeck } from '../utils/deckUtils';\n\nconst initialState = {\n  score: 0,\n  dealerHand: [],\n  playerHand: [],\n  currentDealerScore: 0,\n  currentPlayerScore: 0,\n  gameStage: 'ready',\n  hasPair: false,\n  deck: []\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_BET':\n      return {\n        ...state,\n        bet: action.payload\n      };\n    case 'DEAL_CARDS':\n      return {\n        ...state,\n        dealerHand: action.payload.dealerHand,\n        playerHand: action.payload.playerHand,\n        currentDealerScore: action.payload.currentDealerScore,\n        currentPlayerScore: action.payload.currentPlayerScore,\n        gameStage: 'inProgress',\n        deck: action.payload.newDeck,\n        hasPair: action.payload.playerHasPair\n      };\n    case 'HIT':\n      return {\n        ...state,\n        playerHand: [...state.playerHand, action.payload.card],\n        currentPlayerScore: action.payload.score\n      };\n    case 'BUST':\n      return {\n        ...state,\n        gameStage: 'result'\n      };\n    case 'UPDATE_DECK':\n      return {\n        ...state,\n        deck: action.payload\n      };\n    case 'UPDATE_SCORE_CORRECT':\n      // log the score\n      console.log('score', state.score);\n      console.log('bet', state.bet);\n      return {\n        ...state,\n        score: state.score + 1\n      };\n    case 'UPDATE_SCORE_INCORRECT':\n      return {\n        ...state,\n        score: 0\n      };\n    case 'STAND':\n      return {\n        ...state,\n        dealerHand: action.payload.hand,\n        currentDealerScore: action.payload.score,\n        gameStage: 'result'\n      };\n    case 'RESET_GAME':\n      return {\n        ...initialState,\n        deck: getDeck(),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,UAAU,EAAE,EAAE;EACdC,UAAU,EAAE,EAAE;EACdC,kBAAkB,EAAE,CAAC;EACrBC,kBAAkB,EAAE,CAAC;EACrBC,SAAS,EAAE,OAAO;EAClBC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE;AACR,CAAC;AAED,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGV,YAAY;EAAA,IAAEW,MAAM;EAC/C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,OAAO;QACL,GAAGF,KAAK;QACRG,GAAG,EAAEF,MAAM,CAACG;MACd,CAAC;IACH,KAAK,YAAY;MACf,OAAO;QACL,GAAGJ,KAAK;QACRR,UAAU,EAAES,MAAM,CAACG,OAAO,CAACZ,UAAU;QACrCC,UAAU,EAAEQ,MAAM,CAACG,OAAO,CAACX,UAAU;QACrCC,kBAAkB,EAAEO,MAAM,CAACG,OAAO,CAACV,kBAAkB;QACrDC,kBAAkB,EAAEM,MAAM,CAACG,OAAO,CAACT,kBAAkB;QACrDC,SAAS,EAAE,YAAY;QACvBE,IAAI,EAAEG,MAAM,CAACG,OAAO,CAACC,OAAO;QAC5BR,OAAO,EAAEI,MAAM,CAACG,OAAO,CAACE;MAC1B,CAAC;IACH,KAAK,KAAK;MACR,OAAO;QACL,GAAGN,KAAK;QACRP,UAAU,EAAE,CAAC,GAAGO,KAAK,CAACP,UAAU,EAAEQ,MAAM,CAACG,OAAO,CAACG,IAAI,CAAC;QACtDZ,kBAAkB,EAAEM,MAAM,CAACG,OAAO,CAACb;MACrC,CAAC;IACH,KAAK,MAAM;MACT,OAAO;QACL,GAAGS,KAAK;QACRJ,SAAS,EAAE;MACb,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGI,KAAK;QACRF,IAAI,EAAEG,MAAM,CAACG;MACf,CAAC;IACH,KAAK,sBAAsB;MACzB;MACAI,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,KAAK,CAACT,KAAK,CAAC;MACjCiB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAET,KAAK,CAACG,GAAG,CAAC;MAC7B,OAAO;QACL,GAAGH,KAAK;QACRT,KAAK,EAAES,KAAK,CAACT,KAAK,GAAG;MACvB,CAAC;IACH,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGS,KAAK;QACRT,KAAK,EAAE;MACT,CAAC;IACH,KAAK,OAAO;MACV,OAAO;QACL,GAAGS,KAAK;QACRR,UAAU,EAAES,MAAM,CAACG,OAAO,CAACM,IAAI;QAC/BhB,kBAAkB,EAAEO,MAAM,CAACG,OAAO,CAACb,KAAK;QACxCK,SAAS,EAAE;MACb,CAAC;IACH,KAAK,YAAY;MACf,OAAO;QACL,GAAGN,YAAY;QACfQ,IAAI,EAAET,OAAO;MACf,CAAC;IACH;MACE,OAAOW,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}