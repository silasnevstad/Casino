{"ast":null,"code":"import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\nexport const setBet = bet => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\nexport const dealCards = () => {\n  return (dispatch, getState) => {\n    const deck = getDeck();\n    const {\n      game\n    } = getState();\n    const shuffledDeck = shuffleDeck(deck);\n    console.log(deck);\n    const playerCard1 = shuffledDeck.pop();\n    const dealerCard1 = shuffledDeck.pop();\n    const playerCard2 = shuffledDeck.pop();\n    const hiddenCard = shuffledDeck.pop();\n    const currentDealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n    const currentPlayerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n\n    // remove the cards from the deck (we have removed 4 cards)\n    const newDeck = shuffledDeck.slice(4);\n\n    // update gameState game\n    // game.dealerHand = [dealerCard1, hiddenCard];\n    // game.playerHand = [playerCard1, playerCard2];\n    // game.currentDealerScore = currentDealerScore;\n    // game.currentPlayerScore = currentPlayerScore;\n    // game.gameStage = 'inProgress';\n    // game.deck = newDeck;\n\n    dispatch({\n      type: 'DEAL_CARDS',\n      payload: game\n    });\n  };\n};\nexport const hit = () => (dispatch, getState) => {\n  const {\n    game\n  } = getState();\n  const deck = game.deck;\n  console.log(deck);\n  const nextCard = getNextCard(deck);\n  const currentScore = getHandValue([...game.playerHand, nextCard]);\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: currentScore\n    }\n  });\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\nexport const getNextCard = deck => {\n  return deck[0];\n};\nexport const getHandValue = hand => {\n  let value = 0;\n  let hasAce = false;\n  for (let i = 0; i < hand.length; i++) {\n    console.log(hand);\n    const cardValue = getCardValue(hand[i].value);\n    if (cardValue === 11) {\n      hasAce = true;\n    }\n    value += cardValue;\n  }\n  if (value > 21 && hasAce) {\n    value -= 10;\n  }\n  return value;\n};\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};","map":{"version":3,"names":["getDeck","shuffleDeck","getCardValue","setBet","bet","type","payload","dealCards","dispatch","getState","deck","game","shuffledDeck","console","log","playerCard1","pop","dealerCard1","playerCard2","hiddenCard","currentDealerScore","currentPlayerScore","newDeck","slice","hit","nextCard","getNextCard","currentScore","getHandValue","playerHand","card","score","hand","value","hasAce","i","length","cardValue","stand","dealerHand","dealerScore","newCard","push","resetGame"],"sources":["/Users/silasnevstad/Desktop/Everything/CurrentProjects/Casino/my-app/src/actions/gameActions.js"],"sourcesContent":["import { getDeck, shuffleDeck, getCardValue } from '../utils/deckUtils';\n\nexport const setBet = (bet) => {\n  return {\n    type: 'SET_BET',\n    payload: bet\n  };\n};\n\nexport const dealCards = () => {\n  return (dispatch, getState) => {\n    const deck = getDeck();\n    const { game } = getState();\n    const shuffledDeck = shuffleDeck(deck);\n    console.log(deck)\n\n    const playerCard1 = shuffledDeck.pop();\n    const dealerCard1 = shuffledDeck.pop();\n    const playerCard2 = shuffledDeck.pop();\n    const hiddenCard = shuffledDeck.pop();  \n\n    const currentDealerScore = getCardValue(dealerCard1) + getCardValue(hiddenCard);\n    const currentPlayerScore = getCardValue(playerCard1) + getCardValue(playerCard2);\n\n    // remove the cards from the deck (we have removed 4 cards)\n    const newDeck = shuffledDeck.slice(4);\n\n    // update gameState game\n    // game.dealerHand = [dealerCard1, hiddenCard];\n    // game.playerHand = [playerCard1, playerCard2];\n    // game.currentDealerScore = currentDealerScore;\n    // game.currentPlayerScore = currentPlayerScore;\n    // game.gameStage = 'inProgress';\n    // game.deck = newDeck;\n\n    dispatch({\n      type: 'DEAL_CARDS',\n      payload: game\n    });\n  };\n};\n\n\n\nexport const hit = () => (dispatch, getState) => {\n  const { game } = getState();\n  const deck = game.deck;\n  console.log(deck);\n\n  const nextCard = getNextCard(deck);\n  const currentScore = getHandValue([...game.playerHand, nextCard]);\n\n  dispatch({\n    type: 'HIT',\n    payload: {\n      card: nextCard,\n      score: currentScore\n    }\n  });\n\n  // Remove the next card from the deck\n  const newDeck = deck.slice(1);\n  dispatch({\n    type: 'UPDATE_DECK',\n    payload: newDeck\n  });\n};\n\nexport const getNextCard = (deck) => {\n  return deck[0];\n}\n\nexport const getHandValue = (hand) => {\n  let value = 0;\n  let hasAce = false;\n\n  for (let i = 0; i < hand.length; i++) {\n    console.log(hand);\n    const cardValue = getCardValue(hand[i].value);\n    if (cardValue === 11) {\n      hasAce = true;\n    }\n    value += cardValue;\n  }\n\n  if (value > 21 && hasAce) {\n    value -= 10;\n  }\n\n  return value;\n}\n\n\n\nexport const stand = () => {\n  return (dispatch, getState) => {\n    const deck = getState().game.deck;\n    const dealerHand = getState().game.dealerHand;\n    let dealerScore = getState().game.currentDealerScore;\n\n    // Reveal hidden card and update dealer score\n    const hiddenCard = dealerHand[1];\n    dealerHand[1] = hiddenCard;\n    dealerScore += getCardValue(hiddenCard);\n\n    // Dealer must hit until they have 17 or more\n    while (dealerScore < 17) {\n      const newCard = deck.pop();\n      dealerHand.push(newCard);\n      dealerScore += getCardValue(newCard);\n    }\n\n    dispatch({\n      type: 'STAND',\n      payload: {\n        hand: dealerHand,\n        score: dealerScore\n      }\n    });\n  };\n};\n\nexport const resetGame = () => {\n  return {\n    type: 'RESET_GAME'\n  };\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,WAAW,EAAEC,YAAY,QAAQ,oBAAoB;AAEvE,OAAO,MAAMC,MAAM,GAAIC,GAAG,IAAK;EAC7B,OAAO;IACLC,IAAI,EAAE,SAAS;IACfC,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAM;EAC7B,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAMC,IAAI,GAAGV,OAAO,EAAE;IACtB,MAAM;MAAEW;IAAK,CAAC,GAAGF,QAAQ,EAAE;IAC3B,MAAMG,YAAY,GAAGX,WAAW,CAACS,IAAI,CAAC;IACtCG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IAEjB,MAAMK,WAAW,GAAGH,YAAY,CAACI,GAAG,EAAE;IACtC,MAAMC,WAAW,GAAGL,YAAY,CAACI,GAAG,EAAE;IACtC,MAAME,WAAW,GAAGN,YAAY,CAACI,GAAG,EAAE;IACtC,MAAMG,UAAU,GAAGP,YAAY,CAACI,GAAG,EAAE;IAErC,MAAMI,kBAAkB,GAAGlB,YAAY,CAACe,WAAW,CAAC,GAAGf,YAAY,CAACiB,UAAU,CAAC;IAC/E,MAAME,kBAAkB,GAAGnB,YAAY,CAACa,WAAW,CAAC,GAAGb,YAAY,CAACgB,WAAW,CAAC;;IAEhF;IACA,MAAMI,OAAO,GAAGV,YAAY,CAACW,KAAK,CAAC,CAAC,CAAC;;IAErC;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAf,QAAQ,CAAC;MACPH,IAAI,EAAE,YAAY;MAClBC,OAAO,EAAEK;IACX,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAID,OAAO,MAAMa,GAAG,GAAG,MAAM,CAAChB,QAAQ,EAAEC,QAAQ,KAAK;EAC/C,MAAM;IAAEE;EAAK,CAAC,GAAGF,QAAQ,EAAE;EAC3B,MAAMC,IAAI,GAAGC,IAAI,CAACD,IAAI;EACtBG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EAEjB,MAAMe,QAAQ,GAAGC,WAAW,CAAChB,IAAI,CAAC;EAClC,MAAMiB,YAAY,GAAGC,YAAY,CAAC,CAAC,GAAGjB,IAAI,CAACkB,UAAU,EAAEJ,QAAQ,CAAC,CAAC;EAEjEjB,QAAQ,CAAC;IACPH,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE;MACPwB,IAAI,EAAEL,QAAQ;MACdM,KAAK,EAAEJ;IACT;EACF,CAAC,CAAC;;EAEF;EACA,MAAML,OAAO,GAAGZ,IAAI,CAACa,KAAK,CAAC,CAAC,CAAC;EAC7Bf,QAAQ,CAAC;IACPH,IAAI,EAAE,aAAa;IACnBC,OAAO,EAAEgB;EACX,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,WAAW,GAAIhB,IAAI,IAAK;EACnC,OAAOA,IAAI,CAAC,CAAC,CAAC;AAChB,CAAC;AAED,OAAO,MAAMkB,YAAY,GAAII,IAAI,IAAK;EACpC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,MAAM,GAAG,KAAK;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpCtB,OAAO,CAACC,GAAG,CAACkB,IAAI,CAAC;IACjB,MAAMK,SAAS,GAAGnC,YAAY,CAAC8B,IAAI,CAACG,CAAC,CAAC,CAACF,KAAK,CAAC;IAC7C,IAAII,SAAS,KAAK,EAAE,EAAE;MACpBH,MAAM,GAAG,IAAI;IACf;IACAD,KAAK,IAAII,SAAS;EACpB;EAEA,IAAIJ,KAAK,GAAG,EAAE,IAAIC,MAAM,EAAE;IACxBD,KAAK,IAAI,EAAE;EACb;EAEA,OAAOA,KAAK;AACd,CAAC;AAID,OAAO,MAAMK,KAAK,GAAG,MAAM;EACzB,OAAO,CAAC9B,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,MAAMC,IAAI,GAAGD,QAAQ,EAAE,CAACE,IAAI,CAACD,IAAI;IACjC,MAAM6B,UAAU,GAAG9B,QAAQ,EAAE,CAACE,IAAI,CAAC4B,UAAU;IAC7C,IAAIC,WAAW,GAAG/B,QAAQ,EAAE,CAACE,IAAI,CAACS,kBAAkB;;IAEpD;IACA,MAAMD,UAAU,GAAGoB,UAAU,CAAC,CAAC,CAAC;IAChCA,UAAU,CAAC,CAAC,CAAC,GAAGpB,UAAU;IAC1BqB,WAAW,IAAItC,YAAY,CAACiB,UAAU,CAAC;;IAEvC;IACA,OAAOqB,WAAW,GAAG,EAAE,EAAE;MACvB,MAAMC,OAAO,GAAG/B,IAAI,CAACM,GAAG,EAAE;MAC1BuB,UAAU,CAACG,IAAI,CAACD,OAAO,CAAC;MACxBD,WAAW,IAAItC,YAAY,CAACuC,OAAO,CAAC;IACtC;IAEAjC,QAAQ,CAAC;MACPH,IAAI,EAAE,OAAO;MACbC,OAAO,EAAE;QACP0B,IAAI,EAAEO,UAAU;QAChBR,KAAK,EAAES;MACT;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAM;EAC7B,OAAO;IACLtC,IAAI,EAAE;EACR,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}